package Grammar;

import java.util.ArrayList;
import java.util.List;

public class Grammar {

    public static List<Production> productions = new ArrayList<Production>();

    static {
        productions.add(new Production("A = Sinicial"));
        productions.add(new Production("Sinicial = List_Func Decl_Main"));
        productions.add(new Production("Sinicial = Decl_Main"));
        productions.add(new Production("List_Func = List_Func Decl_Func "));
        productions.add(new Production("List_Func = Decl_Func "));
        productions.add(new Production("Decl_Func = FUNC Var_type ID BEGIN_PARAM Parameters END_PARAM BEGIN_SCP Cmds END_SCP "));
        productions.add(new Production("Decl_Func = FUNC Var_type ID BEGIN_PARAM END_PARAM BEGIN_SCP Cmds END_SCP "));
        productions.add(new Production("Decl_Main = FUNC Var_type MAIN BEGIN_PARAM END_PARAM BEGIN_SCP Cmds END_SCP "));
        productions.add(new Production("Parameters = Parameters SEPARATOR Decl_Var "));
        productions.add(new Production("Parameters = Decl_Var"));
        productions.add(new Production("Decl_Var_r = Decl_Var_List"));
        productions.add(new Production("Decl_Var_r = Decl_Var "));
        productions.add(new Production("Decl_Var_r = Decl_Var_List OP_ATRIB E "));
        productions.add(new Production("Decl_Var_r = Decl_Var OP_ATRIB E "));
        productions.add(new Production("Decl_Var_List = Decl_Var_r SEPARATOR Decl_Var"));
        productions.add(new Production("Decl_Var = Var_type_r ID"));
        productions.add(new Production("Var_type_r = Var_type"));
        productions.add(new Production("Var_type_r = Var_arr_type"));
        productions.add(new Production("Var_arr_type = Var_type BEGIN_ARR E END_ARR "));
        productions.add(new Production("Var_arr_type = Var_type BEGIN_ARR END_ARR "));
        productions.add(new Production("Var_type = INT"));
        productions.add(new Production("Var_type = STR"));
        productions.add(new Production("Var_type = CHAR"));
        productions.add(new Production("Var_type = FLOAT "));
        productions.add(new Production("Var_type = BOOL "));
        productions.add(new Production("Var_type = VOID "));
        productions.add(new Production("E = E OP_ATRIB E_Or "));
        productions.add(new Production("E = E OP_CONCAT E_Or "));
        productions.add(new Production("E = E_Or"));
        productions.add(new Production("E_Or = E_Or OP_OR E_And "));
        productions.add(new Production("E_Or = E_And"));
        productions.add(new Production("E_And = E_And OP_AND E_Relat "));
        productions.add(new Production("ERRO - IGNORE"));
        productions.add(new Production("ERRO - IGNORE"));
        productions.add(new Production("ERRO - IGNORE"));
        productions.add(new Production("E_And = E_Relat "));
        productions.add(new Production("E_Relat = E_Relat OP_REL_EQ E_Add "));
        productions.add(new Production("E_Relat = E_Relat OP_RELAT E_Add "));
        productions.add(new Production("E_Relat = E_Add "));
        productions.add(new Production("E_Add = E_Add OP_ADD E_Mult "));
        productions.add(new Production("E_Add = E_Mult"));
        productions.add(new Production("E_Mult = E_Mult OP_MULTI E_Exp "));
        productions.add(new Production("E_Mult = E_Exp "));
        productions.add(new Production("E_Exp = E_Exp OP_EXP E_Unneg "));
        productions.add(new Production("E_Exp = E_Unneg "));
        productions.add(new Production("E_Unneg = OP_UNNEG E_Neg "));
        productions.add(new Production("E_Unneg = E_Neg"));
        productions.add(new Production("E_Neg = OP_NEG Er "));
        productions.add(new Production("E_Neg = Er"));
        productions.add(new Production("Er = BEGIN_PARAM E END_PARAM"));
        productions.add(new Production("Er = Operand"));
        productions.add(new Production("Operand = Const"));
        productions.add(new Production("Operand = Call_Func"));
        productions.add(new Production("Operand = ID BEGIN_ARR E END_ARR"));
        productions.add(new Production("Operand = ID"));
        productions.add(new Production("Const = Numeric_Const "));
        productions.add(new Production("Const = CONST_STR"));
        productions.add(new Production("Const = CONST_BOOL "));
        productions.add(new Production("Const = CONST_CHAR "));
        productions.add(new Production("Numeric_Const = CONST_INT  "));
        productions.add(new Production("Numeric_Const = CONST_FLT "));
        productions.add(new Production("Attrib = ID OP_ATRIB E "));
        productions.add(new Production("Attrib = Id_Arr OP_ATRIB E"));
        productions.add(new Production("Id_Arr = ID BEGIN_ARR E END_ARR "));
        productions.add(new Production("Call_Func = ID BEGIN_PARAM Call_Parameters END_PARAM"));
        productions.add(new Production("Call_Func = ID BEGIN_PARAM END_PARAM "));
        productions.add(new Production("Call_Parameters = Call_Parameters SEPARATOR E"));
        productions.add(new Production("Call_Parameters = E"));
        productions.add(new Production("Input = INS_INPUT BEGIN_PARAM Input_Param END_PARAM "));
        productions.add(new Production("Input_Param = Input_Param SEPARATOR Param_r"));
        productions.add(new Production("Input_Param = Param_r"));
        productions.add(new Production("Show = INS_SHOW BEGIN_PARAM E END_PARAM "));
        productions.add(new Production("Param_r = CONST_STR"));
        productions.add(new Production("Param_r = ID BEGIN_ARR E END_ARR"));
        productions.add(new Production("Param_r = ID BEGIN_ARR END_ARR"));
        productions.add(new Production("Param_r = ID "));
        productions.add(new Production("Cond = INS_IF E BEGIN_SCP Cmds END_SCP Elif_List"));
        productions.add(new Production("Cond = INS_IF E BEGIN_SCP Cmds END_SCP Else"));
        productions.add(new Production("Cond = INS_IF E BEGIN_SCP Cmds END_SCP"));
        productions.add(new Production("Elif_List = Elif_List INS_ELIF E BEGIN_SCP Cmds END_SCP "));
        productions.add(new Production("Elif_List = Elif_List INS_ELIF E BEGIN_SCP Cmds END_SCP Else"));
        productions.add(new Production("Elif_List = INS_ELIF E BEGIN_SCP Cmds END_SCP"));
        productions.add(new Production("Elif_List = INS_ELIF E BEGIN_SCP Cmds END_SCP Else"));
        productions.add(new Production("Else = INS_ELSE BEGIN_SCP Cmds END_SCP"));
        productions.add(new Production("Loop = INS_WHILE E BEGIN_SCP Cmds END_SCP"));
        productions.add(new Production("Loop = For Cmds END_SCP"));
        productions.add(new Production("For = INS_FOR Attrib SEPARATOR E SEPARATOR E BEGIN_SCP "));
        productions.add(new Production("For = INS_FOR Attrib SEPARATOR E SEPARATOR BEGIN_SCP "));
        productions.add(new Production("For = INS_FOR SEPARATOR E SEPARATOR E BEGIN_SCP "));
        productions.add(new Production("For = INS_FOR SEPARATOR E SEPARATOR BEGIN_SCP"));
        productions.add(new Production("Cmds = Cmd Cmds"));
        productions.add(new Production("Cmds = Cmd"));
        productions.add(new Production("Cmd = Decl_Var_r "));
        productions.add(new Production("Cmd = Rtrn"));
        productions.add(new Production("Cmd = Loop "));
        productions.add(new Production("Cmd = Cond "));
        productions.add(new Production("Cmd = Show "));
        productions.add(new Production("Cmd = Input "));
        productions.add(new Production("Cmd = Call_Func "));
        productions.add(new Production("Cmd = Attrib"));
        productions.add(new Production("Rtrn = INS_RETURN E"));
    }

}
